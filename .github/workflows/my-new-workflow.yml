name: Test Manual Workflow

on:
    workflow_dispatch:
      inputs:
        Environnement:
          description: 'The Environnement I need to deploy on'
          required: true
          default: '/dev'

jobs:
    manual-jobs-dev:
      runs-on: ubuntu-latest
      environment: dev

      steps:
        - name: Exemple
          run: |
            echo "Mon exemple"
            echo "Env Name: ${{ github.event.inputs.Environnement }}"

        - name: matrix
          run:
            echo "${{ ToJson(matrix) }}"

        - name: github
          run: 
            echo "${{ ToJson(github) }}"

        - name: env
          run: 
            echo "${{ ToJson(env) }}"

        - name: runner
          run: 
            echo "${{ ToJson(runner) }}"
        
        - name: Secrets Variable
          run: 
            echo "${{ vars.MY_API_URL }}"

    manual-jobs-prod:
      runs-on: ubuntu-latest
      environment: prod

      steps:
        - name: Exemple
          run: |
            echo "Mon exemple"
            echo "Env Name: ${{ github.event.inputs.Environnement }}"

        - name: matrix
          run:
            echo "${{ ToJson(matrix) }}"

        - name: github
          run: 
            echo "${{ ToJson(github) }}"

        - name: env
          run: 
            echo "${{ ToJson(env) }}"

        - name: runner
          run: 
            echo "${{ ToJson(runner) }}"
        
        - name: Secrets Variable
          run: 
            echo "${{ vars.MY_API_URL_TEST }}"

expression_job:
  runs-on: ubuntu-latest
  name: Expressions
  if: ${{ github.ref == 'refs/heads/main' && github.event.inputs.logLevel == 'debug'}}

  steps:
    -run: echo "Only run if triggered by mlain branch..."
      if: contains(github.ref, 'main')

    -run: |
      echo "Fail dependong on parameter"
      return 1
    if: github.event.inputs.run_matrix == 'true'  

    -run: echo "Run Always"
      if: always()
    -run: echo "Run only on succes"
      if: success()
    -run: echo "Run only on failure"
      if: failure() 
    